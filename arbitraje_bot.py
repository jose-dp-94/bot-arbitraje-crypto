import os
import time
import datetime
from binance.client import Client as BinanceClient
from cryptocom.exchange import Exchange as CryptoClient

# Leer claves desde variables de entorno
BINANCE_API_KEY = os.environ.get("BINANCE_API_KEY", "").strip()
BINANCE_API_SECRET = os.environ.get("BINANCE_API_SECRET", "").strip()
CRYPTO_API_KEY = os.environ.get("CRYPTO_API_KEY", "").strip()
CRYPTO_API_SECRET = os.environ.get("CRYPTO_API_SECRET", "").strip()

# Validaci√≥n inicial de claves
if not all([BINANCE_API_KEY, BINANCE_API_SECRET, CRYPTO_API_KEY, CRYPTO_API_SECRET]):
    print("[‚ùå ERROR] Faltan claves de API. Revisa tus variables en Railway.")
    exit(1)

# Inicializar clientes
binance = BinanceClient(BINANCE_API_KEY, BINANCE_API_SECRET)
crypto = CryptoClient()

# Funci√≥n para obtener saldo de Binance
def obtener_saldo_binance(moneda="USDT"):
    try:
        balance = binance.get_asset_balance(asset=moneda)
        return float(balance["free"])
    except Exception as e:
        print(f"[‚ùå ERROR saldo Binance]: {e}")
        return 0.0

# Funci√≥n para obtener saldo de Crypto.com
def obtener_saldo_crypto(moneda="USDC"):
    try:
        resumen = crypto.get_account_summary()
        return float(resumen["accounts"][0]["available"].get(moneda, 0.0))
    except Exception as e:
        print(f"[‚ùå ERROR saldo Crypto.com]: {e}")
        return 0.0

# Simulaci√≥n de arbitraje (aqu√≠ va la l√≥gica real si hay diferencias de precios)
def ejecutar_arbitraje():
    print(f"[üü° {datetime.datetime.now()}] Ejecutando arbitraje...")

    saldo_binance = obtener_saldo_binance()
    saldo_crypto = obtener_saldo_crypto()

    print(f"-> Binance: {saldo_binance} USDT")
    print(f"-> Crypto.com: {saldo_crypto} USDC")

    # Aqu√≠ ir√≠a la l√≥gica real de comparar precios y mover fondos
    # Por ahora simulamos ganancia
    ganancia_simulada = 2.50
    print(f"[‚úÖ GANANCIA simulada]: {ganancia_simulada} ‚Ç¨")

# Bucle principal del bot (entre las 09:00 y 23:00 cada d√≠a)
def iniciar_bot():
    while True:
        hora_actual = datetime.datetime.now().hour
        if 9 <= hora_actual <= 23:
            ejecutar_arbitraje()
        else:
            print(f"[‚è∏ Fuera de horario] Son las {hora_actual}h. Esperando...")
        
        time.sleep(3600)  # Ejecuta cada hora

if __name__ == "__main__":
    print("üöÄ Iniciando bot de arbitraje autom√°tico...")
    iniciar_bot()
